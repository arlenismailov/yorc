version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: >
      bash -c "
        mkdir -p /app/static &&
        mkdir -p /app/staticfiles &&
        python manage.py collectstatic --noinput --clear &&
        python manage.py makemigrations django_celery_beat &&
        python manage.py migrate django_celery_beat --noinput &&
        python manage.py makemigrations django_celery_results &&
        python manage.py migrate django_celery_results --noinput &&
        python manage.py makemigrations &&
        python manage.py migrate --noinput &&
        gunicorn myproject.wsgi:application -b 0.0.0.0:8000 -w 4"
    ports:
      - "8000:8000"    
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings.production
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DEBUG=${DEBUG}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

  daphne:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python -m daphne -b 0.0.0.0 -p 8001 myproject.asgi:application
    volumes:
      - .:/app
    ports:
      - "8001:8001"
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings.production
    depends_on:
      - web
      - redis
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A myproject worker -l info
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings.production
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: celery -A myproject beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DJANGO_SETTINGS_MODULE=myproject.settings.production
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - REDIS_HOST=redis
    depends_on:
      web:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  telegram_bot:
    build:
      context: .
      dockerfile: docker/Dockerfile
    command: python bot/telegram_bot.py
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DJANGO_SETTINGS_MODULE=myproject.settings.production
    depends_on:
      - db
      - web
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - web
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume: