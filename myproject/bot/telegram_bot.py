import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ django.setup()
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()

from aiogram import Dispatcher, types, Router
from aiogram.filters import Command
from django.conf import settings
import asyncio
import logging
from main.models import Product, TelegramUser
from asgiref.sync import sync_to_async
from django.db import connection
from bot.bot_instance import bot  # –ò–∑–º–µ–Ω–∏–ª–∏ —Å .bot_instance –Ω–∞ bot.bot_instance

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()
router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
@sync_to_async
def get_products(limit=5):
    with connection.cursor() as cursor:
        return list(Product.objects.all().order_by('-id')[:limit])

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        username = message.from_user.username
        await sync_to_async(TelegramUser.objects.get_or_create)(
            user_id=user_id,
            defaults={'username': username}
        )
        
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n'
            '–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤.\n'
            '–ù–∞–∂–º–∏ /products —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–æ–≤–∞—Ä—ã'
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ üòî")

# –ö–æ–º–∞–Ω–¥–∞ /products
@router.message(Command("products"))
async def cmd_products(message: types.Message):
    try:
        products = await get_products(limit=10)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
        if not products:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ üòï")
            return

        for product in products:
            await message.answer(
                f"üì¶ {product.name}\n"
                f"üí∞ –¶–µ–Ω–∞: ${product.price}\n"
                f"üìù {product.description[:100] if product.description else ''}"
            )
    except Exception as e:
        logger.error(f"Error in products command: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ üòî")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    logger.info("Starting bot...")
    await dp.start_polling(bot)

def run_bot():
    asyncio.run(main())

if __name__ == '__main__':
    run_bot()
